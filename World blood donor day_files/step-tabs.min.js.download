"use strict";
/**
* @author Daut Molahasanov
* @version 1.0.0
* @description JavaScript Sitefinity Tabs
*
* @class
* stepTabsJS
*/

;

(function (window) {
  if (document.body.classList.contains('sfPageEditor')) {
    console.log("Editor Mode detected...");
    return;
  }

  var tebberSelector = '.sf-step-tabber',
      headerListSelector = '.sf-step-tabber__ul-list',
      tabsSelector = '.sf-step-tabber__single-tab-wrapper',
      tabHeaderSelector = '.sf-step-tabber__tab-header-wrapper',
      tabbers = null;
  /**
   *  Contructor
   */

  function stepTabsJS() {
    tabbers = document.querySelectorAll(tebberSelector);
    tabbers.forEach(function (tabber) {
      tabber.tabHeaderList = [], tabber.tabInnerList = [], tabber.currentTabIndex = 0, tabber.allTabs = tabber.querySelectorAll(tabsSelector), tabber.headerList = tabber.querySelector(headerListSelector);

      if (tabber && tabber.headerList && tabber.allTabs.length > 1) {
        init(tabber);
      } else return;
    });
  }

  function init(tabber) {
    createHeaderList(tabber);
    addListeners(tabber);
    expandCurrentTab(tabber);
  }

  ;

  function expandCurrentTab(tabber) {
    setActiveTab(tabber, tabber.currentTabIndex);
  }

  ;
  /**
   * Move all tab headers in the UL and link IDs
   */

  function createHeaderList(tabber) {
    tabber.allTabs.forEach(function (currentTab) {
      var currentHeader = currentTab.querySelector(tabHeaderSelector);
      var li = document.createElement('li');
      tabber.headerList.appendChild(li);
      li.classList.add('header_li');
      tabber.tabInnerList.push(currentHeader);
      li.appendChild(currentHeader.cloneNode(true));
      tabber.tabHeaderList = tabber.headerList.querySelectorAll(".header_li");
    });
  }

  ;
  /**
  * Remove active class from all tabs and headers
  */

  function removeActiveClass(tabber) {
    _removeActiveClass(tabber.tabHeaderList);

    _removeActiveClass(tabber.tabInnerList);

    _removeActiveClass(tabber.allTabs);
  }

  ;
  /**
  * Remove active tab from Node list
  * @param  {NodeList} nodeList
  */

  function _removeActiveClass(nodeList) {
    nodeList.forEach(function (node) {
      node.classList.remove('active');
    });
  }
  /**
  * Set active tab
  * @param  {Node} tab
  */


  function setActiveTab(tabber, index) {
    tabber.tabHeaderList[index].classList.add('active');
    tabber.tabInnerList[index].classList.add('active');
    tabber.allTabs[index].classList.add('active');
  }

  ;
  /**
  * Add event listeners for clicks 
  * @param  {Node} tab
  */

  function addListeners(tabber) {
    _addListenersToAll(tabber, tabber.tabHeaderList);

    _addListenersToAll(tabber, tabber.tabInnerList);

    window.addEventListener('resize', function () {
      if (window.innerWidth > 768) {
        expandCurrentTab(tabber);
      }
    });
  }

  ;

  function _addListenersToAll(tabber, nodeList) {
    nodeList.forEach(function (node, index) {
      node.addEventListener('click', function (e) {
        if (e.currentTarget.classList.contains('active') && window.innerWidth <= 768) {
          removeActiveClass(tabber);
        } else {
          removeActiveClass(tabber);
          e.currentTarget.classList.add('active');
          tabber.currentTabIndex = index;
          expandCurrentTab(tabber);

          if (tabber.allTabs[index].getBoundingClientRect().top >= window.innerHeight - 100 || tabber.allTabs[index].getBoundingClientRect().top <= 0) {
            tabber.allTabs[index].scrollIntoView(true);
          }
        }
      });
    });
  }

  stepTabsJS();
})(window);
//# sourceMappingURL=step-tabs.min.js.map
